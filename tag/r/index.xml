<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | Pablo Cortes</title>
    <link>https://academic-demo.netlify.app/tag/r/</link>
      <atom:link href="https://academic-demo.netlify.app/tag/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 28 Aug 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://academic-demo.netlify.app/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>R</title>
      <link>https://academic-demo.netlify.app/tag/r/</link>
    </image>
    
    <item>
      <title>Day 1: Exploring R &amp; RStudio</title>
      <link>https://academic-demo.netlify.app/workshops/neom/exploringr/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/workshops/neom/exploringr/</guid>
      <description>
&lt;script src=&#34;https://academic-demo.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#opening-rstudio&#34; id=&#34;toc-opening-rstudio&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Opening &lt;code&gt;RStudio&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#console&#34; id=&#34;toc-console&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; Console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#environmenthistorygit&#34; id=&#34;toc-environmenthistorygit&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; Environment/History/Git&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#environment&#34; id=&#34;toc-environment&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2.1&lt;/span&gt; Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#history&#34; id=&#34;toc-history&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2.2&lt;/span&gt; History&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#git&#34; id=&#34;toc-git&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2.3&lt;/span&gt; Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filesplotspackageshelpviewer&#34; id=&#34;toc-filesplotspackageshelpviewer&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3&lt;/span&gt; Files/Plots/Packages/Help/Viewer&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#files&#34; id=&#34;toc-files&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3.1&lt;/span&gt; Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plots&#34; id=&#34;toc-plots&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3.2&lt;/span&gt; Plots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#packages&#34; id=&#34;toc-packages&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3.3&lt;/span&gt; Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#help&#34; id=&#34;toc-help&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3.4&lt;/span&gt; Help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#viewer&#34; id=&#34;toc-viewer&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3.5&lt;/span&gt; Viewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#source-panel&#34; id=&#34;toc-source-panel&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.4&lt;/span&gt; Source Panel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;opening-rstudio&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Opening &lt;code&gt;RStudio&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;When you open &lt;code&gt;RStudio&lt;/code&gt;, a window appears with three panels in it.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://academic-demo.netlify.app/workshops/neom/exploringr_files/rstudio.png&#34; width=&#34;800&#34; height=&#34;400&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;RStudio IDE for R in Mac&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The largest panel is a &lt;strong&gt;console&lt;/strong&gt; window. This is where you’ll run your R code and see results. The console window is exactly what you’d see if you ran R. Everything else you see is unique to RStudio. Hidden in the other panes are a text editor, a graphics window, a debugger, a file manager, and much more.&lt;/p&gt;
&lt;div id=&#34;console&#34; class=&#34;section level2&#34; number=&#34;1.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; Console&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;console&lt;/strong&gt; panel (in RStudio, the bottom left panel) is the place where R is waiting for you to tell it what to do, and where it will show the results of a command.&lt;/p&gt;
&lt;p&gt;You type R code into the bottom line of the RStudio console pane and then click Enter to run it. The code you type is called a command, because it will command your computer to do something for you. The line you type it into is called the command line.&lt;/p&gt;
&lt;p&gt;When you type a command at the prompt and hit Enter, your computer executes the command and shows you the results. Then RStudio displays a fresh prompt for your next command. For example, if you type 1 + 1 and hit Enter, RStudio will display:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;5 + 5
## [1] 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll notice that a [1] appears next to your result. R is just letting you know that this line begins with the first value in your result. Some commands return more than one value, and their results may fill up multiple lines. For example, the command 1:50 returns 50 values; it creates a sequence of integers from 1 to 50&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;1:50
##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
## [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can type commands directly into the console, but they will be forgotten when you close the session. It is better to enter the commands in the script editor, and save the script.&lt;/p&gt;
&lt;p&gt;Some useful features of console panel:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code Completion&lt;/strong&gt;: The RStudio IDE supports the automatic completion of code using the Tab key. The code completion feature also provides inline help for functions whenever possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Retrieving Previous Commands&lt;/strong&gt;: As you work with R you’ll often want to re-execute a command which you previously entered. As with the standard R console, the RStudio console supports the ability to recall previous commands using the arrow keys: Up (Recall previous commands) and Down (Reverse of Up).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Console Title Bar&lt;/strong&gt;: Display of the current working directory. The ability to interrupt R during a long computation. Minimizing and maximizing the Console in relation to the Source pane (using the buttons at the top-right or by double-clicking the title bar).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;environmenthistorygit&#34; class=&#34;section level2&#34; number=&#34;1.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; Environment/History/Git&lt;/h2&gt;
&lt;div id=&#34;environment&#34; class=&#34;section level3&#34; number=&#34;1.2.1&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1&lt;/span&gt; Environment&lt;/h3&gt;
&lt;p&gt;The Environment tab provides meta-project information such as what values you have stored in variables and your custom functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;history&#34; class=&#34;section level3&#34; number=&#34;1.2.2&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.2&lt;/span&gt; History&lt;/h3&gt;
&lt;p&gt;The History tab runs through your previously-executed commands.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;git&#34; class=&#34;section level3&#34; number=&#34;1.2.3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.3&lt;/span&gt; Git&lt;/h3&gt;
&lt;p&gt;Git is an additional optional tab that is not enabled by default. Git is a version control tool that can be configured by going to Tools -&amp;gt; Global Options and navigating to Git/SVN.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;filesplotspackageshelpviewer&#34; class=&#34;section level2&#34; number=&#34;1.3&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3&lt;/span&gt; Files/Plots/Packages/Help/Viewer&lt;/h2&gt;
&lt;div id=&#34;files&#34; class=&#34;section level3&#34; number=&#34;1.3.1&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3.1&lt;/span&gt; Files&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Files&lt;/strong&gt; shows you all files and folders in your current working directory. You can change your working directory by going to Session -&amp;gt; Set Working Directory -&amp;gt; Choose Directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;plots&#34; class=&#34;section level3&#34; number=&#34;1.3.2&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3.2&lt;/span&gt; Plots&lt;/h3&gt;
&lt;p&gt;The Plots tab displays any plots, graphs, or charts you run using one of R’s visualization tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;packages&#34; class=&#34;section level3&#34; number=&#34;1.3.3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3.3&lt;/span&gt; Packages&lt;/h3&gt;
&lt;p&gt;Packages is the system library of default R packages. Use the checkboxes to select and deselect packages here, or install additional packages by running install.packages(“packagename”) in the Console.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;help&#34; class=&#34;section level3&#34; number=&#34;1.3.4&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3.4&lt;/span&gt; Help&lt;/h3&gt;
&lt;p&gt;Help is the viewer for R documentation. To learn about a function, command, or other tool in R, enter help(“topicname”) in the Console and refer to the Help viewer.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;viewer&#34; class=&#34;section level3&#34; number=&#34;1.3.5&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3.5&lt;/span&gt; Viewer&lt;/h3&gt;
&lt;p&gt;The Viewer displays additional visualizations; for instance, if you are running a Shiny web app or previewing an HTML web document.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;source-panel&#34; class=&#34;section level2&#34; number=&#34;1.4&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4&lt;/span&gt; Source Panel&lt;/h2&gt;
&lt;p&gt;The Source panel is where you create, save, and edit &lt;strong&gt;R scripts&lt;/strong&gt;. R scripts are blocks of code that perform a task that you want to save, and when saved have a´.R extension.&lt;/p&gt;
&lt;p&gt;When you’ve written and saved a script, you can re-use it for future projects.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;To create a new script&lt;/strong&gt;: In the top menu select File &amp;gt; New File &amp;gt; R Script or or Ctrl/Cmd + Shift + N.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;To save a script&lt;/strong&gt;: In the top menu select File &amp;gt; Save or
Ctrl/Cmd + S.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;To open a previous script&lt;/strong&gt;: In the top menu select File &amp;gt; Open File or Ctrl/Cmd + O.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In RStudio, you can run a line of code of a R script file by placing a cursor anywhere on that line and pressing the shortcut keys Ctrl+Enter on a Windows keyboard or Command+Enter on a Mac.&lt;/p&gt;
&lt;p&gt;You can also run an entire block of code by selecting all lines to be run then pressing the shortcut keys Ctrl+Enter/Command+Enter.&lt;/p&gt;
&lt;p&gt;Or, you can run the entire R script by pressing Ctrl+Alt+R in Windows or Command+Option+R on a Mac.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Day 1: Packages</title>
      <link>https://academic-demo.netlify.app/workshops/neom/packages/</link>
      <pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/workshops/neom/packages/</guid>
      <description>
&lt;script src=&#34;https://academic-demo.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#base-packages&#34; id=&#34;toc-base-packages&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Base packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installing-packages-from-cran&#34; id=&#34;toc-installing-packages-from-cran&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Installing Packages from CRAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#loading-packages&#34; id=&#34;toc-loading-packages&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Loading Packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;base-packages&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Base packages&lt;/h1&gt;
&lt;p&gt;One of R’s attractive features is its rich collection of packages designed for specific applications and techniques.&lt;/p&gt;
&lt;p&gt;Packages allow users to share R functions and data with other users.&lt;/p&gt;
&lt;p&gt;Some packages come already installed with R, others must be downloaded separately from a CRAN repository or other locations such as GitHub or personal websites.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;installing-packages-from-cran&#34; class=&#34;section level1&#34; number=&#34;2&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Installing Packages from CRAN&lt;/h1&gt;
&lt;p&gt;There are thousands of additional R packages to choose from. Most can be accessed from the CRAN repository.&lt;/p&gt;
&lt;p&gt;In order to use a package, it needs to be installed on your computer by running &lt;code&gt;install.packages(&#34;name_of_package&#34;)&lt;/code&gt; (do not forget &lt;code&gt;&#34;&#34;&lt;/code&gt; around the name of the package).&lt;/p&gt;
&lt;p&gt;In the following example, the library ggplot2 is installed from CRAN.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;install.packages(&#34;ggplot2&#34;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The installation is usually straightforward and if any other packages need to be installed, RStudio will install those as well as long as the Install dependencies option is checked.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-packages&#34; class=&#34;section level1&#34; number=&#34;3&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Loading Packages&lt;/h1&gt;
&lt;p&gt;Once the package is installed, or is a base package, you must load the package and only after it has been loaded you can use all the functions and datasets it contains. To load a package, run &lt;code&gt;library(name_of_package)&lt;/code&gt; (this time &lt;code&gt;&#34;&#34;&lt;/code&gt; around the name of the package are optional).&lt;/p&gt;
&lt;p&gt;In the following example, the library ggplot2 is loaded.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;library(ggplot2)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Day 1: R Data Types</title>
      <link>https://academic-demo.netlify.app/workshops/neom/datatypes/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/workshops/neom/datatypes/</guid>
      <description>
&lt;script src=&#34;https://academic-demo.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#objects-and-classes&#34; id=&#34;toc-objects-and-classes&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Objects and Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#variables&#34; id=&#34;toc-variables&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Variables&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#changing-value-of-variables&#34; id=&#34;toc-changing-value-of-variables&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; Changing Value of Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#naming-variables&#34; id=&#34;toc-naming-variables&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; Naming Variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-types&#34; id=&#34;toc-data-types&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Data Types&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#numeric&#34; id=&#34;toc-numeric&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1&lt;/span&gt; Numeric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#integer&#34; id=&#34;toc-integer&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2&lt;/span&gt; Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complex&#34; id=&#34;toc-complex&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3&lt;/span&gt; Complex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#character&#34; id=&#34;toc-character&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.4&lt;/span&gt; Character&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#logical&#34; id=&#34;toc-logical&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.5&lt;/span&gt; Logical&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#factors&#34; id=&#34;toc-factors&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.6&lt;/span&gt; Factors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-structures&#34; id=&#34;toc-data-structures&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vectors&#34; id=&#34;toc-vectors&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; Vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#matrices-and-arrays&#34; id=&#34;toc-matrices-and-arrays&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;6&lt;/span&gt; Matrices and Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lists&#34; id=&#34;toc-lists&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;7&lt;/span&gt; Lists&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#accessing-list-elements&#34; id=&#34;toc-accessing-list-elements&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;7.1&lt;/span&gt; Accessing List Elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-frames&#34; id=&#34;toc-data-frames&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;8&lt;/span&gt; Data Frames&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#creating-data-frames&#34; id=&#34;toc-creating-data-frames&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;8.1&lt;/span&gt; Creating Data Frames&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#addingchanging-column-names&#34; id=&#34;toc-addingchanging-column-names&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;8.2&lt;/span&gt; Adding/Changing Column Names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#expanding-a-data-frame&#34; id=&#34;toc-expanding-a-data-frame&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;8.3&lt;/span&gt; Expanding a Data Frame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subsetting-data-frames&#34; id=&#34;toc-subsetting-data-frames&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;8.4&lt;/span&gt; Subsetting Data Frames&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-data-frames-from-files&#34; id=&#34;toc-creating-data-frames-from-files&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;8.5&lt;/span&gt; Creating Data Frames From Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#useful-data-frame-functions&#34; id=&#34;toc-useful-data-frame-functions&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;8.6&lt;/span&gt; Useful Data Frame Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;objects-and-classes&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Objects and Classes&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt; is an object-oriented programming language with the fundamental design principle: Everything is an &lt;code&gt;object.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;object&lt;/code&gt; is simply a collection of data (&lt;code&gt;variables&lt;/code&gt;) and methods (functions).&lt;/p&gt;
&lt;p&gt;All &lt;code&gt;object&lt;/code&gt; in &lt;code&gt;R&lt;/code&gt; have a specific &lt;code&gt;class&lt;/code&gt; that can have a set of class-specific attributes. Basically, a &lt;code&gt;class&lt;/code&gt; is a blueprint for that object.&lt;/p&gt;
&lt;p&gt;We would never build a house without a blueprint. The blueprint (prototype) of a house is the &lt;code&gt;class&lt;/code&gt;, which contains all the details about the floors, doors, windows, etc. Based on these descriptions we build our house. Here, house is the &lt;code&gt;object&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;variables&#34; class=&#34;section level1&#34; number=&#34;2&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Variables&lt;/h1&gt;
&lt;p&gt;In R, a &lt;strong&gt;variable&lt;/strong&gt; is a name given to a memory location, which is used to store values in a computer program. Variables in R programming can be used to store different types of values such as numbers, words, matrices, and even tables. These different types of values are called &lt;strong&gt;data types&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We can create variables from within the R environment and from files on your computer. &lt;code&gt;R&lt;/code&gt; uses&lt;code&gt;=&lt;/code&gt;or &lt;code&gt;&amp;lt;-&lt;/code&gt; to assign values to a variable name.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- 2022&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, &lt;code&gt;x&lt;/code&gt; is the variable where the data &lt;em&gt;2022&lt;/em&gt; is stored. Now, whenever we use &lt;code&gt;x&lt;/code&gt; in our program, we will get 2022.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- 2022

x
## [1] 2022&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can can see, when we print &lt;code&gt;x&lt;/code&gt; we get 2022 as output.&lt;/p&gt;
&lt;div id=&#34;changing-value-of-variables&#34; class=&#34;section level2&#34; number=&#34;2.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Changing Value of Variables&lt;/h2&gt;
&lt;p&gt;Depending on the conditions or information passed into the program, we can change the value of a variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- 2022
x
## [1] 2022&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# changing value of a variable
x &amp;lt;- 23456722
x
## [1] 23456722&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;naming-variables&#34; class=&#34;section level2&#34; number=&#34;2.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; Naming Variables&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;R&lt;/code&gt;, we can use any name for our variables. However, For a variable to be valid, it should follow some simple rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It should contain letters, digits, periods, and underscores.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It should start with a letter or a period, but not with digits (e.g. &lt;em&gt;foryou&lt;/em&gt; but not &lt;em&gt;4you&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It should not start with a dot followed by a digit (e.g. &lt;em&gt;.4you&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It should not be a reserved keyword. (e.g. &lt;em&gt;for&lt;/em&gt;, &lt;em&gt;in&lt;/em&gt;, &lt;em&gt;NA&lt;/em&gt;,, &lt;em&gt;NULL&lt;/em&gt;, &lt;em&gt;TRUE&lt;/em&gt;, &lt;em&gt;beak&lt;/em&gt;, among many others).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;R is case sensitive (e.g. &lt;em&gt;Neom&lt;/em&gt; and &lt;em&gt;neom&lt;/em&gt; are treated as different variables).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-types&#34; class=&#34;section level1&#34; number=&#34;3&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Data Types&lt;/h1&gt;
&lt;p&gt;Each variable in &lt;code&gt;R&lt;/code&gt; has an associated data type. The fundamental data types in R Programming are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Numeric.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Complex.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Character.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Logical.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;R is able to automatically distinguish between different types of data. We can find out the type of any object using the &lt;code&gt;class()&lt;/code&gt; function. Alternatively, we can ask if an object is a specific class using using a logical test. The &lt;code&gt;is.classOfData()&lt;/code&gt; family of functions will return either a &lt;code&gt;TRUE&lt;/code&gt; or a &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s discuss each of these &lt;code&gt;R&lt;/code&gt; data types one by one.&lt;/p&gt;
&lt;div id=&#34;numeric&#34; class=&#34;section level2&#34; number=&#34;3.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; Numeric&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;R&lt;/code&gt;, the &lt;code&gt;numeric&lt;/code&gt; data type represents all real numbers with or without decimal values. It is the default data type for numbers in R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# assign a decimal to value x
x &amp;lt;- 150.4

# print the class name of variable
class(x)
## [1] &amp;quot;numeric&amp;quot;

# ask the class name of variable
is.numeric(x)
## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When R stores a number in a variable, it converts the number into a &lt;code&gt;double&lt;/code&gt; value or a decimal type with at least two decimal places. This means that a value such as &lt;em&gt;100&lt;/em&gt; here, is stored as &lt;em&gt;100.00&lt;/em&gt; with a type of double and a class of numeric.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# assign a decimal to value mynumber
mynumber &amp;lt;- 100

# print the output
mynumber
## [1] 100

# print the class name of variable
class(mynumber)
## [1] &amp;quot;numeric&amp;quot;

# ask the class name of variable
is.numeric(mynumber)
## [1] TRUE

# print the type of variable
typeof(mynumber)
## [1] &amp;quot;double&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;integer&#34; class=&#34;section level2&#34; number=&#34;3.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; Integer&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;integer&lt;/code&gt; data type specifies real values without decimal points. We use the suffix &lt;code&gt;L&lt;/code&gt; to specify integer data. We can also convert a value into an integer type using the &lt;code&gt;as.integer()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# assign a integer value with the to my_integer
my_integer &amp;lt;- 100L

# print the output
my_integer
## [1] 100

# print the class name of variable
class(my_integer)
## [1] &amp;quot;integer&amp;quot;

# ask the class name of variable
is.numeric(my_integer)
## [1] TRUE

# print the type of variable
typeof(my_integer)
## [1] &amp;quot;integer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;complex&#34; class=&#34;section level2&#34; number=&#34;3.3&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3&lt;/span&gt; Complex&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;complex&lt;/code&gt; data type is used to specify purely imaginary values in R. We use the suffix &lt;code&gt;i&lt;/code&gt; to specify the imaginary part.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# assign a complex value with the to MyComplex
MyComplex &amp;lt;- 100i

# print the output
MyComplex
## [1] 0+100i

# print the class name of variable
class(MyComplex)
## [1] &amp;quot;complex&amp;quot;

# ask the class name of variable
is.numeric(MyComplex)
## [1] FALSE

# print the type of variable
typeof(MyComplex)
## [1] &amp;quot;complex&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;character&#34; class=&#34;section level2&#34; number=&#34;3.4&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.4&lt;/span&gt; Character&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;character&lt;/code&gt; data type is used to specify character or string values in a variable. A string is a set of characters. Strings in &lt;code&gt;R&lt;/code&gt; can contain alphabets, numbers, and symbols. For example, &lt;em&gt;N&lt;/em&gt; is a single character and &lt;em&gt;Neom&lt;/em&gt; is a string.&lt;/p&gt;
&lt;p&gt;We can use single quotes &lt;code&gt;&#39;&#39;&lt;/code&gt; or double quotes &lt;code&gt;&#34;&#34;&lt;/code&gt; to represent strings. If we don’t use quotes or double quotes, &lt;code&gt;R&lt;/code&gt; will consider the character and string as an object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# assign a string to word_1
word_1 &amp;lt;- &amp;quot;NC1&amp;quot;

# print the output
word_1
## [1] &amp;quot;NC1&amp;quot;

# print the class name of variable
class(word_1)
## [1] &amp;quot;character&amp;quot;

# ask the class name of variable
is.numeric(word_1)
## [1] FALSE

# print the type of variable
typeof(word_1)
## [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;logical&#34; class=&#34;section level2&#34; number=&#34;3.5&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.5&lt;/span&gt; Logical&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;logical&lt;/code&gt; data type in R is also known as boolean data type. It can only have two values: &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;factors&#34; class=&#34;section level2&#34; number=&#34;3.6&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.6&lt;/span&gt; Factors&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Factors&lt;/code&gt; are the data objects which are used to categorize the data and store it as levels (e.g. “MALE” or “FEMALE”). This is useful for storing categorical data. Factors can store both strings and integers.&lt;/p&gt;
&lt;p&gt;We can create factors using the function &lt;code&gt;factor()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Creating factor using factor()
sex&amp;lt;- factor(c(&amp;quot;Small&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Male&amp;quot;, &amp;quot;Female&amp;quot;))

# print the output
sex
## [1] Small  Female Male   Female
## Levels: Female Male Small

# print the class name of variable
class(sex)
## [1] &amp;quot;factor&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-structures&#34; class=&#34;section level1&#34; number=&#34;4&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; Data Structures&lt;/h1&gt;
&lt;/div&gt;
&lt;div id=&#34;vectors&#34; class=&#34;section level1&#34; number=&#34;5&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;5&lt;/span&gt; Vectors&lt;/h1&gt;
&lt;p&gt;A vector is the most common and basic data structure in &lt;code&gt;R&lt;/code&gt;. A vector is a collection of elements that are most commonly of mode character, logical, integer or numeric. Vectors can contain numbers, characters, or logicals, but the key thing to remember is that all the elements inside a vector must be of the same class. In other words, vectors can contain either numbers, characters or logicals but not mixtures of these types of data.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;c()&lt;/code&gt; combines/joins single R objects into a vector of R objects. It is mostly used for creating vectors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# creating a numeric vector of 5 elements
NumericVector &amp;lt;- c(1,2,5,7,8)

# print the output
NumericVector
## [1] 1 2 5 7 8

# print the class name
class(NumericVector)
## [1] &amp;quot;numeric&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# creating a character vector of 3 elements
CharacterVector &amp;lt;- c(&amp;quot;I&amp;quot;, &amp;quot;Love&amp;quot;, &amp;quot;Neom&amp;quot;)

# print the output
CharacterVector
## [1] &amp;quot;I&amp;quot;    &amp;quot;Love&amp;quot; &amp;quot;Neom&amp;quot;

# print the class name
class(CharacterVector)
## [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;matrices-and-arrays&#34; class=&#34;section level1&#34; number=&#34;6&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;6&lt;/span&gt; Matrices and Arrays&lt;/h1&gt;
&lt;p&gt;A matrix is simply a vector that has additional attributes called dimensions. Arrays are just multidimensional matrices. Again, matrices and arrays must contain elements all of the same data class.&lt;/p&gt;
&lt;p&gt;To create a matrix, we can use the &lt;code&gt;matrix()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# creating a 3x3 matrix. 
My_Matrix &amp;lt;- matrix(1:9, nrow=3)

# print the output
My_Matrix
##      [,1] [,2] [,3]
## [1,]    1    4    7
## [2,]    2    5    8
## [3,]    3    6    9

# print the class name
class(My_Matrix)
## [1] &amp;quot;matrix&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default the matrix is filled rather than the default column-wise. We can fill the matrix row-wise using &lt;code&gt;byrow = TRUE&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# creating a 3x3 matrix. 
My_Matrix &amp;lt;- matrix(1:9, nrow=3, byrow = TRUE)

# print the output
My_Matrix
##      [,1] [,2] [,3]
## [1,]    1    2    3
## [2,]    4    5    6
## [3,]    7    8    9

# print the class name
class(My_Matrix)
## [1] &amp;quot;matrix&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To create an array we can use the &lt;code&gt;array()&lt;/code&gt; functions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# An array with one dimension with values ranging from 1 to 12
array1 &amp;lt;- array(1:12)

# print the output
array1
##  [1]  1  2  3  4  5  6  7  8  9 10 11 12

# print the class name
class(array1)
## [1] &amp;quot;array&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use the &lt;code&gt;array()&lt;/code&gt; function to create an array, and the &lt;code&gt;dim = argument&lt;/code&gt; parameter to specify the dimensions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# An array with more than one dimension
array2 &amp;lt;- array(1:12, dim = c(3,4,2))

# print the output
array2
## , , 1
## 
##      [,1] [,2] [,3] [,4]
## [1,]    1    4    7   10
## [2,]    2    5    8   11
## [3,]    3    6    9   12
## 
## , , 2
## 
##      [,1] [,2] [,3] [,4]
## [1,]    1    4    7   10
## [2,]    2    5    8   11
## [3,]    3    6    9   12

# print the class name
class(array2)
## [1] &amp;quot;array&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When using the &lt;code&gt;array()&lt;/code&gt; function we define the dimensions using the &lt;code&gt;dim = argument&lt;/code&gt;, in our case 2 rows, 4 columns in 2 different matrices.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lists&#34; class=&#34;section level1&#34; number=&#34;7&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;7&lt;/span&gt; Lists&lt;/h1&gt;
&lt;p&gt;A list can contain many different data types inside it. A list is a collection of data which is ordered and changeable.&lt;/p&gt;
&lt;p&gt;To create a list, use the &lt;code&gt;list()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# List of three components
MySelf &amp;lt;- list(&amp;quot;John&amp;quot;, 36, 1.82)

# Print the output
MySelf 
## [[1]]
## [1] &amp;quot;John&amp;quot;
## 
## [[2]]
## [1] 36
## 
## [[3]]
## [1] 1.82

# print the type of variable
typeof(MySelf)
## [1] &amp;quot;list&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can check de length of the list using the function &lt;code&gt;length()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(MySelf)
## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can examine the structure of the list using the funtion &lt;code&gt;str()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(MySelf)
## List of 3
##  $ : chr &amp;quot;John&amp;quot;
##  $ : num 36
##  $ : num 1.82&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also crate a list with tags which makes it easier to reference the components of the list.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# List of three components
MySelf &amp;lt;- list(Name=&amp;quot;John&amp;quot;, Age=36, Height=1.82)

# Print the output
MySelf 
## $Name
## [1] &amp;quot;John&amp;quot;
## 
## $Age
## [1] 36
## 
## $Height
## [1] 1.82&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can add more components to the list using the function &lt;code&gt;c()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# List of three components
MyTeam &amp;lt;- list(c(&amp;quot;John&amp;quot;, &amp;quot;Steve&amp;quot;), c(36,45), c(1.82, 1.70))

# Give names to the elements in the list.
names(MyTeam) &amp;lt;- c(&amp;quot;Name&amp;quot;, &amp;quot;Age&amp;quot;, &amp;quot;Height&amp;quot;)

# Print the output
MyTeam 
## $Name
## [1] &amp;quot;John&amp;quot;  &amp;quot;Steve&amp;quot;
## 
## $Age
## [1] 36 45
## 
## $Height
## [1] 1.82 1.70&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;accessing-list-elements&#34; class=&#34;section level2&#34; number=&#34;7.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;7.1&lt;/span&gt; Accessing List Elements&lt;/h2&gt;
&lt;p&gt;Elements of the list can be accessed by the index of the element in the list. In case of named lists it can also be accessed using the names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Access the first element of the list. As it is also a list, all its elements will be printed.
MyTeam[1]
## $Name
## [1] &amp;quot;John&amp;quot;  &amp;quot;Steve&amp;quot;


# Access the list element using the name of the element.
MyTeam$Age
## [1] 36 45&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-frames&#34; class=&#34;section level1&#34; number=&#34;8&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;8&lt;/span&gt; Data Frames&lt;/h1&gt;
&lt;p&gt;A data frame is the most common way of storing data in R and, generally, is the data structure most often used for data analyses.&lt;/p&gt;
&lt;p&gt;Basically, a data frame is a list of equal-length vectors. Each element of the list can be thought of as a column and the length of each element of the list is the number of rows.&lt;/p&gt;
&lt;p&gt;As a result, data frames can store different classes of objects in each column (i.e. numeric, character, factor).&lt;/p&gt;
&lt;p&gt;In essence, the easiest way to think of a data frame is as an Excel worksheet that contains columns of different types of data but are all of equal length rows.&lt;/p&gt;
&lt;div id=&#34;creating-data-frames&#34; class=&#34;section level2&#34; number=&#34;8.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;8.1&lt;/span&gt; Creating Data Frames&lt;/h2&gt;
&lt;p&gt;Data frames can also be created explicitly with the &lt;code&gt;data.frame()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# data frame with 3 columns and 2 rows
df &amp;lt;- data.frame(col1 = c(&amp;quot;John&amp;quot;, &amp;quot;Steve&amp;quot;), 
                 col2 = c(36,45),
                 col3 = c(1.82, 1.70))

# Print the output
df
##    col1 col2 col3
## 1  John   36 1.82
## 2 Steve   45 1.70&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how col1 in df was converted to a column of factors. This is because there is a default setting in &lt;code&gt;data.frame()&lt;/code&gt; that converts character columns to factors. We can turn this off by setting the &lt;code&gt;stringsAsFactors = FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We also can create a data frame from other types of objects using &lt;code&gt;c()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
# Generate three objects
Name &amp;lt;- c(&amp;quot;John&amp;quot;, &amp;quot;Steve&amp;quot;)
Age &amp;lt;-  c(36,45)
Height &amp;lt;- c(1.82, 1.70)

# data frame with 3 columns
df &amp;lt;- data.frame(Name, Age, Height)

# Print the output
df
##    Name Age Height
## 1  John  36   1.82
## 2 Steve  45   1.70&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can explore the structure of a data frame using the function &lt;code&gt;str()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(df)
## &amp;#39;data.frame&amp;#39;:    2 obs. of  3 variables:
##  $ Name  : Factor w/ 2 levels &amp;quot;John&amp;quot;,&amp;quot;Steve&amp;quot;: 1 2
##  $ Age   : num  36 45
##  $ Height: num  1.82 1.7&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;addingchanging-column-names&#34; class=&#34;section level2&#34; number=&#34;8.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;8.2&lt;/span&gt; Adding/Changing Column Names&lt;/h2&gt;
&lt;p&gt;We can also also add/change the existing column names by using &lt;code&gt;colnames()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# add/change column names
colnames(df) &amp;lt;- c(&amp;quot;Employee&amp;quot;, &amp;quot;Weight&amp;quot;, &amp;quot;Other&amp;quot;)

# Print the output
df
##   Employee Weight Other
## 1     John     36  1.82
## 2    Steve     45  1.70&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;expanding-a-data-frame&#34; class=&#34;section level2&#34; number=&#34;8.3&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;8.3&lt;/span&gt; Expanding a Data Frame&lt;/h2&gt;
&lt;p&gt;A data frame can be expanded by adding columns and rows. We can add new columns to the data frame using the function &lt;code&gt;cbind()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# New vector
Country &amp;lt;- c(&amp;quot;KSA&amp;quot;, &amp;quot;Ireland&amp;quot;)

# Adding new column
df1 &amp;lt;- cbind(df, Country)

#Print the output
df1
##   Employee Weight Other Country
## 1     John     36  1.82     KSA
## 2    Steve     45  1.70 Ireland&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also use the &lt;code&gt;rbind()&lt;/code&gt; function to add data frame rows together. To add rows appropriately, we need to convert the items being added to a data frame and make sure the columns are the same class as the original data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# New vector
NewEmployee &amp;lt;- data.frame(Employee=&amp;quot;Peter&amp;quot;, 
                          Weight=70,
                          Other=1.56,
                          Country=&amp;quot;USA&amp;quot;)

# Adding new column
df2 &amp;lt;- rbind(df1, NewEmployee)

#Print the output
df2
##   Employee Weight Other Country
## 1     John     36  1.82     KSA
## 2    Steve     45  1.70 Ireland
## 3    Peter     70  1.56     USA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;subsetting-data-frames&#34; class=&#34;section level2&#34; number=&#34;8.4&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;8.4&lt;/span&gt; Subsetting Data Frames&lt;/h2&gt;
&lt;p&gt;The most basic way of subsetting a data frame in R is by using square brackets &lt;code&gt;[row, column]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let´s select all the information of the first row of our data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Information for first employee
df2[1,]
##   Employee Weight Other Country
## 1     John     36  1.82     KSA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let´s select all the information of the second and third rows of our data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Information for two employees
df2[2:3,]
##   Employee Weight Other Country
## 2    Steve     45  1.70 Ireland
## 3    Peter     70  1.56     USA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also select information for all rows from a specific column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# All employee´s names
df2[,1]
## [1] John  Steve Peter
## Levels: John Steve Peter&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To select a specific column, we can also type in the name of the data frame, followed by a &lt;code&gt;$&lt;/code&gt;, and then the name of the column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# All employee´s names
df2$Employee
## [1] John  Steve Peter
## Levels: John Steve Peter&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, maybe we want information from more than one column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# All employee´s names and weights
df2[,1:2]
##   Employee Weight
## 1     John     36
## 2    Steve     45
## 3    Peter     70&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe, we are interested in specific information for one row from a specific column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Weight of second employee in our data frame
df2[2,3]
## [1] 1.7&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-data-frames-from-files&#34; class=&#34;section level2&#34; number=&#34;8.5&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;8.5&lt;/span&gt; Creating Data Frames From Files&lt;/h2&gt;
&lt;p&gt;We can also create a new data frame when importing the data into R. In the next session we will explore more about how import data into R.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;useful-data-frame-functions&#34; class=&#34;section level2&#34; number=&#34;8.6&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;8.6&lt;/span&gt; Useful Data Frame Functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;head()&lt;/code&gt;: shows first 6 rows.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tail()&lt;/code&gt;: shows last 6 rows.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dim()&lt;/code&gt;: returns the dimensions of data frame.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nrow()&lt;/code&gt;: number of rows.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ncol()&lt;/code&gt;: number of columns.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str()&lt;/code&gt;: structure of data frame.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;names()&lt;/code&gt;: show the names attribute for a data frame.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Day 2: Importing data</title>
      <link>https://academic-demo.netlify.app/workshops/neom/importing/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/workshops/neom/importing/</guid>
      <description>
&lt;script src=&#34;https://academic-demo.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#importing-data-into-rstudio&#34; id=&#34;toc-importing-data-into-rstudio&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Importing data into &lt;code&gt;RStudio&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#format-your-tidy-data&#34; id=&#34;toc-format-your-tidy-data&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; Format your (tidy) data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setting-the-working-directory&#34; id=&#34;toc-setting-the-working-directory&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; Setting the Working Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#importing-using-command&#34; id=&#34;toc-importing-using-command&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3&lt;/span&gt; Importing using command&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#csv-files&#34; id=&#34;toc-csv-files&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3.1&lt;/span&gt; csv Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#txt-files&#34; id=&#34;toc-txt-files&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3.2&lt;/span&gt; txt Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#xlsxlsx-files&#34; id=&#34;toc-xlsxlsx-files&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3.3&lt;/span&gt; xls/xlsx Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#importing-using-environment-tab&#34; id=&#34;toc-importing-using-environment-tab&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.4&lt;/span&gt; Importing using Environment tab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;importing-data-into-rstudio&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Importing data into &lt;code&gt;RStudio&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Although creating data frames from existing data structures is extremely useful, by far the most common approach is to create a data frame by importing data from an external file.&lt;/p&gt;
&lt;p&gt;To do this, we need to have our data correctly formatted (tidy data) and saved in a file format that R is able to recognise.&lt;/p&gt;
&lt;p&gt;R is able to recognise a wide variety of file formats, although in reality we will probably end up only using one or two regularly.&lt;/p&gt;
&lt;div id=&#34;format-your-tidy-data&#34; class=&#34;section level2&#34; number=&#34;1.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; Format your (tidy) data&lt;/h2&gt;
&lt;p&gt;Tidy data is a standard way of mapping the meaning of a dataset to its structure. A dataset is messy or tidy depending on how rows, columns and tables are matched up with observations, variables and types. In tidy data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Every column is a variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every row is an observation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every cell is a single value (usually either numbers or strings).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When tidying our data we should ensure that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Each variable has its own column.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each row is an observation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The top of each column contains the name of the variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are no blank columns or blank rows between data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All data in a column has the same type (e.g. it is all numerical data, or it is all text data).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data are consistent (e.g. if a binary variable can take values ‘Yes’ or ‘No’ with no alternatives such as ‘Y’ and ‘N’).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;setting-the-working-directory&#34; class=&#34;section level2&#34; number=&#34;1.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; Setting the Working Directory&lt;/h2&gt;
&lt;p&gt;Before importing and reading any data, we must set the working directory to the location of the data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;getwd()&lt;/code&gt; will print out the current directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;setwd(“C:/mydata”)&lt;/code&gt; will set the current working directory to a specific location.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can also set the current working directory clicking the Session tab and then Set Working Directory option.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://academic-demo.netlify.app/workshops/neom/importing_files/setwd.png&#34; width=&#34;600&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;importing-using-command&#34; class=&#34;section level2&#34; number=&#34;1.3&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3&lt;/span&gt; Importing using command&lt;/h2&gt;
&lt;div id=&#34;csv-files&#34; class=&#34;section level3&#34; number=&#34;1.3.1&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3.1&lt;/span&gt; csv Files&lt;/h3&gt;
&lt;p&gt;We can import &lt;strong&gt;.csv&lt;/strong&gt; files using basic R function &lt;code&gt;read.csv()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;read.csv(&#34;path/file_name.csv&#34;, header = TRUE)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;path : The path of the file to be imported.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;file_name: The name of the file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;header : Indicator of whether to import column headings. By default TRUE.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;txt-files&#34; class=&#34;section level3&#34; number=&#34;1.3.2&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3.2&lt;/span&gt; txt Files&lt;/h3&gt;
&lt;p&gt;We can import &lt;strong&gt;.txt&lt;/strong&gt; or a tab-delimited text files using basic R function &lt;code&gt;read.table()&lt;/code&gt;. The data will be imported as a data frame.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;read.table(&#34;path/file_name.txt&#34;, header=TRUE)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;path : The path of the file to be imported.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;file_name: The name of the file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;header : Indicator of whether to import column headings. By default
TRUE .&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can also will use &lt;code&gt;read.table()&lt;/code&gt; methods to import &lt;strong&gt;.csv&lt;/strong&gt; file into R Programming Language.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;read.table(&#34;path/file_name.csv&#34;, header=TRUE, sep = &#34;,&#34;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sep = “,” : The separator for the values in each row.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;xlsxlsx-files&#34; class=&#34;section level3&#34; number=&#34;1.3.3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3.3&lt;/span&gt; xls/xlsx Files&lt;/h3&gt;
&lt;p&gt;We can import import Excel files, &lt;strong&gt;.xls&lt;/strong&gt; and &lt;strong&gt;.xlsx&lt;/strong&gt;, using the function &lt;code&gt;read_excel()&lt;/code&gt; from &lt;code&gt;readxl&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;library(readxl)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;read_excel(&#34;path/file_name.xlsx&#34;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We can also import &lt;strong&gt;.xlsx&lt;/strong&gt; using the function &lt;code&gt;read.xlsx()&lt;/code&gt; from &lt;code&gt;xlsx&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;library(xlsx)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;read.xlsx(&#34;path/file_name.xlsx&#34;)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;importing-using-environment-tab&#34; class=&#34;section level2&#34; number=&#34;1.4&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4&lt;/span&gt; Importing using Environment tab&lt;/h2&gt;
&lt;p&gt;A flexible way to import data is to click on the Environment tab in the upper right window of RStudio and then click the Import Dataset tab.&lt;/p&gt;
&lt;p&gt;Multiple file type options are shown, such as text, Excel, SPSS, SAS, and Stata.&lt;/p&gt;
&lt;p&gt;We can easily import data through R studio with the following steps.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;From the Environment tab click on the Import Dataset Menu.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the file extension from the option.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A pop-up box will appear, either enter the file name or browse the
desktop.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The selected file will be displayed on a new window with its dimensions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In order to see the output on the console, type the file name.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://academic-demo.netlify.app/workshops/neom/importing_files/Environment.png&#34; width=&#34;400&#34; height=&#34;200&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Day 2: Data Manipulation</title>
      <link>https://academic-demo.netlify.app/workshops/neom/dplyr/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/workshops/neom/dplyr/</guid>
      <description>
&lt;script src=&#34;https://academic-demo.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#data-manipulation&#34; id=&#34;toc-data-manipulation&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Data Manipulation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-manipulation-with-dplyr&#34; id=&#34;toc-data-manipulation-with-dplyr&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Data Manipulation with &lt;code&gt;dplyr&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#dplyr-syntax&#34; id=&#34;toc-dplyr-syntax&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; &lt;code&gt;dplyr&lt;/code&gt; syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pipe-operator&#34; id=&#34;toc-pipe-operator&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; Pipe operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#loading-our-data&#34; id=&#34;toc-loading-our-data&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3&lt;/span&gt; Loading our data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dplyr-verbs&#34; id=&#34;toc-dplyr-verbs&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.4&lt;/span&gt; &lt;code&gt;dplyr&lt;/code&gt; verbs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#looking-at-the-data&#34; id=&#34;toc-looking-at-the-data&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.4.1&lt;/span&gt; Looking at the data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#selecting-columns&#34; id=&#34;toc-selecting-columns&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.4.2&lt;/span&gt; Selecting columns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filtering-rows&#34; id=&#34;toc-filtering-rows&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.4.3&lt;/span&gt; Filtering rows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-columns&#34; id=&#34;toc-creating-columns&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.4.4&lt;/span&gt; Creating columns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summarizing-columns&#34; id=&#34;toc-summarizing-columns&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.4.5&lt;/span&gt; Summarizing columns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiple-verbs-at-once&#34; id=&#34;toc-multiple-verbs-at-once&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.4.6&lt;/span&gt; Multiple verbs at once&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;data-manipulation&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Data Manipulation&lt;/h1&gt;
&lt;p&gt;In real-life, data is not always presented analysis-ready. Most of the time it has gaps, missing values, incorrect date formats, missing variable names, no variable names, or variables scattered into multiple columns etc. When this kind of data is presented for analysis, it needs intervention to make it tidy.&lt;/p&gt;
&lt;p&gt;Data manipulation is the process of organizing data to read and understand it better. We manipulate data for analysis and visualization.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-manipulation-with-dplyr&#34; class=&#34;section level1&#34; number=&#34;2&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Data Manipulation with &lt;code&gt;dplyr&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;dplyr&lt;/code&gt; is a powerful R-package to transform and summarize tabular data with rows and columns. It was created to enable efficient manipulation of data with the advantages of speed and simplicity of coding.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dplyr&lt;/code&gt; provides a consistent set of functions, which we sometimes call verbs. Each of these &lt;code&gt;dplyr&lt;/code&gt; verbs does one thing. Each verb is named in a way that is extremely easy to remember. Some of these include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;glimpse()&lt;/code&gt;: to examine our dataset.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;select()&lt;/code&gt;: to select columns (variables) by their names.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt;: to pick rows (observations/samples) based on their values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mutate()&lt;/code&gt;: to create new variables.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;summarize()&lt;/code&gt;: to compute statistical summaries.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mean&lt;/code&gt;: calculate the mean, or average.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;median&lt;/code&gt;: calculate the median.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max&lt;/code&gt;: find the maximum value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt;: find the minimum value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum&lt;/code&gt;: add all the values together.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;: count the number of records.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;distinct()&lt;/code&gt;: to remove duplicate rows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;arrange()&lt;/code&gt;: to reorder the rows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;group_by()&lt;/code&gt;: to break down the dataset into specified groups of rows.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;dplyr-syntax&#34; class=&#34;section level2&#34; number=&#34;2.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; &lt;code&gt;dplyr&lt;/code&gt; syntax&lt;/h2&gt;
&lt;p&gt;All &lt;code&gt;dplyr&lt;/code&gt; verbs share a similar syntax.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dplyr_verb(dataframe, stuff-to-do)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dplyr_verb : The name of the dplyr verb.&lt;/li&gt;
&lt;li&gt;dataframe : The name of the dataframe to operate on.&lt;/li&gt;
&lt;li&gt;stuff-to-do : Syntax that specifies exactly how to execute the dplyr verb.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;pipe-operator&#34; class=&#34;section level2&#34; number=&#34;2.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; Pipe operator&lt;/h2&gt;
&lt;p&gt;These verbs can be chained together using the pipe operator (&lt;code&gt;%&amp;gt;%&lt;/code&gt;) to perform more complex data manipulations. Basically, the pipe operator makes the output of one line of code the input for the next.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-our-data&#34; class=&#34;section level2&#34; number=&#34;2.3&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3&lt;/span&gt; Loading our data&lt;/h2&gt;
&lt;p&gt;To explore the functions of &lt;code&gt;dplyr&lt;/code&gt;, we need a dataset. We will use the &lt;code&gt;FacultyAffairs&lt;/code&gt; dataset.&lt;/p&gt;
&lt;p&gt;We can load the dataset into the current R session by selecting &lt;code&gt;Import Dataset&amp;gt;From Excel File...&lt;/code&gt; in the Environment tab.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://academic-demo.netlify.app/workshops/neom/dplyr_files/importing.png&#34; width=&#34;800&#34; height=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dplyr-verbs&#34; class=&#34;section level2&#34; number=&#34;2.4&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.4&lt;/span&gt; &lt;code&gt;dplyr&lt;/code&gt; verbs&lt;/h2&gt;
&lt;p&gt;Before using &lt;code&gt;dplyr&lt;/code&gt; it is necessary to install it, since it is not a part of base R.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;dplyr&lt;/code&gt; package is hosted in the CRAN repository. Any package from the CRAN repository can be installed using the function &lt;code&gt;install.packages(&#34;dplyr&#34;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now that we have the dplyr package installed we need to load it to our R workspace. For this purpose we can use the &lt;code&gt;library()&lt;/code&gt; function. If installed correctly, the message “Attaching package: ‘dplyr’” will appear.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
## 
## Attaching package: &amp;#39;dplyr&amp;#39;
## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag
## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;looking-at-the-data&#34; class=&#34;section level3&#34; number=&#34;2.4.1&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.4.1&lt;/span&gt; Looking at the data&lt;/h3&gt;
&lt;p&gt;The verb &lt;code&gt;glimpse()&lt;/code&gt; allow us to see the columns selected in the output without printing all the data every time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(data)
## Rows: 850
## Columns: 32
## $ AcadYear         &amp;lt;dbl&amp;gt; 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,…
## $ FirstYearApp     &amp;lt;dbl&amp;gt; 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,…
## $ EmployeeName     &amp;lt;chr&amp;gt; &amp;quot;Adinolfi, Wilson  K&amp;quot;, &amp;quot;Ait Sidi, Karthikeyan&amp;quot;, &amp;quot;Akin…
## $ Sex              &amp;lt;chr&amp;gt; &amp;quot;M&amp;quot;, &amp;quot;M&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;M&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;M&amp;quot;, &amp;quot;F&amp;quot;…
## $ YearBirth        &amp;lt;dbl&amp;gt; 1987, 1985, 1981, 1979, 1977, 1977, 1975, 1985, 1967,…
## $ Nationality      &amp;lt;chr&amp;gt; &amp;quot;USA&amp;quot;, &amp;quot;USA&amp;quot;, &amp;quot;USA&amp;quot;, &amp;quot;USA&amp;quot;, &amp;quot;USA&amp;quot;, &amp;quot;England&amp;quot;, &amp;quot;Englan…
## $ Appointment      &amp;lt;dbl&amp;gt; 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2,…
## $ SchoolApp        &amp;lt;chr&amp;gt; &amp;quot;ComputerScience&amp;quot;, &amp;quot;ComputerScience&amp;quot;, &amp;quot;ComputerScienc…
## $ Salary           &amp;lt;dbl&amp;gt; 62506, 104437, 64955, 64991, 50825, 57568, 95660, 593…
## $ DaysLateLast30   &amp;lt;dbl&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…
## $ Absences         &amp;lt;dbl&amp;gt; 1, 17, 3, 15, 2, 15, 19, 19, 4, 16, 12, 15, 9, 7, 1, …
## $ ResearchArea     &amp;lt;chr&amp;gt; &amp;quot;AI&amp;quot;, &amp;quot;CC&amp;quot;, &amp;quot;ML&amp;quot;, &amp;quot;ML&amp;quot;, &amp;quot;AI&amp;quot;, &amp;quot;AI&amp;quot;, &amp;quot;ML&amp;quot;, &amp;quot;AI&amp;quot;, &amp;quot;CC&amp;quot;,…
## $ JobSatisfaction  &amp;lt;dbl&amp;gt; 5, 4, 4, 5, 3, 4, 2, 3, 2, 3, 5, 5, 5, 1, 5, 5, 5, 5,…
## $ SelfEvalResp     &amp;lt;dbl&amp;gt; 3, 4, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 3, 3, 3,…
## $ SelfEvalTech     &amp;lt;dbl&amp;gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4,…
## $ SelfEvalInnov    &amp;lt;dbl&amp;gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,…
## $ StudentEvalResp  &amp;lt;dbl&amp;gt; 3, 3, 3, 4, 3, 3, 3, 4, 4, 3, 3, 3, 4, 3, 3, 4, 4, 3,…
## $ StudentEvalTech  &amp;lt;dbl&amp;gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,…
## $ StudentEvalInnov &amp;lt;dbl&amp;gt; 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,…
## $ CoursesUnd       &amp;lt;dbl&amp;gt; 5, 4, 5, 5, 5, 4, 3, 5, 4, 4, 5, 5, 4, 5, 3, 5, 5, 5,…
## $ CoursesGrad      &amp;lt;dbl&amp;gt; 2, 4, 1, 1, 3, 1, 1, 1, 3, 1, 2, 1, 4, 3, 1, 1, 1, 3,…
## $ MentoringResProj &amp;lt;dbl&amp;gt; 7, 7, 6, 7, 6, 7, 7, 2, 5, 7, 7, 7, 7, 6, 7, 7, 7, 2,…
## $ MentoringTheses  &amp;lt;dbl&amp;gt; 5, 5, 5, 5, 3, 5, 5, 0, 5, 5, 5, 5, 2, 5, 4, 5, 5, 5,…
## $ NumPublication   &amp;lt;dbl&amp;gt; 13, 14, 6, 6, 12, 13, 8, 9, 12, 13, 10, 12, 10, 10, 9…
## $ SubManuscripts   &amp;lt;dbl&amp;gt; 12, 14, 11, 10, 12, 13, 13, 11, 13, 11, 12, 13, 11, 1…
## $ NumCitations     &amp;lt;dbl&amp;gt; 213, 236, 199, 181, 224, 211, 214, 178, 200, 241, 230…
## $ NumBooks         &amp;lt;dbl&amp;gt; 0, 0, 0, 0, 0, 1, 1, 1, 2, 3, 3, 0, 1, 1, 1, 0, 1, 1,…
## $ NumConferences   &amp;lt;dbl&amp;gt; 0, 1, 2, 1, 2, 1, 2, 2, 2, 1, 3, 3, 2, 1, 0, 1, 2, 3,…
## $ ResGrantsAwa     &amp;lt;dbl&amp;gt; 4, 3, 3, 4, 3, 4, 3, 5, 4, 3, 3, 4, 4, 4, 2, 4, 5, 4,…
## $ ResGrantsSub     &amp;lt;dbl&amp;gt; 2, 2, 4, 4, 2, 2, 3, 4, 3, 2, 2, 2, 3, 3, 2, 4, 3, 4,…
## $ NumComUniv       &amp;lt;dbl&amp;gt; 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 2, 0, 1, 0, 2, 1,…
## $ NumOut           &amp;lt;dbl&amp;gt; 0, 1, 0, 1, 2, 2, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 0, 2,…&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;selecting-columns&#34; class=&#34;section level3&#34; number=&#34;2.4.2&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.4.2&lt;/span&gt; Selecting columns&lt;/h3&gt;
&lt;p&gt;To select a few columns we need to add their names to the select verb. The order in which we add them, will determine the order in which they appear in the output.&lt;/p&gt;
&lt;p&gt;For example, let´s select the information about Faculty’s full name. The following code can be read as follows: “From the data dataset, select only the EmployeeName column”.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;select(data,EmployeeName)
## # A tibble: 850 × 1
##    EmployeeName         
##    &amp;lt;chr&amp;gt;                
##  1 Adinolfi, Wilson  K  
##  2 Ait Sidi, Karthikeyan
##  3 Akinkuolie, Sarah    
##  4 Alagbe,Trina         
##  5 Anderson, Carol      
##  6 Anderson, Linda      
##  7 Andreola, Colby      
##  8 Athwal, Sam          
##  9 Bachiochi, Linda     
## 10 Newman, Richard      
## # … with 840 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;select()&lt;/code&gt; verb can also be used to drop columns from a dataframe using the the &lt;code&gt;-&lt;/code&gt; symbol. The following code can be read as follows: “From the data dataset, select all columns that are not the EmployeeName column”.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;select(data,-EmployeeName)
## # A tibble: 850 × 31
##    AcadYear FirstYearApp Sex   YearBirth Nationality Appointment SchoolApp      
##       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;          
##  1     2019         2019 M          1987 USA                   1 ComputerScience
##  2     2019         2019 M          1985 USA                   1 ComputerScience
##  3     2019         2019 F          1981 USA                   1 ComputerScience
##  4     2019         2019 F          1979 USA                   1 ComputerScience
##  5     2019         2019 F          1977 USA                   1 ComputerScience
##  6     2019         2019 F          1977 England               2 ComputerScience
##  7     2019         2019 F          1975 England               2 ComputerScience
##  8     2019         2019 M          1985 England               2 ComputerScience
##  9     2019         2019 F          1967 Spain                 3 ComputerScience
## 10     2019         2019 M          1969 Spain                 3 ComputerScience
## # … with 840 more rows, and 24 more variables: Salary &amp;lt;dbl&amp;gt;,
## #   DaysLateLast30 &amp;lt;dbl&amp;gt;, Absences &amp;lt;dbl&amp;gt;, ResearchArea &amp;lt;chr&amp;gt;,
## #   JobSatisfaction &amp;lt;dbl&amp;gt;, SelfEvalResp &amp;lt;dbl&amp;gt;, SelfEvalTech &amp;lt;dbl&amp;gt;,
## #   SelfEvalInnov &amp;lt;dbl&amp;gt;, StudentEvalResp &amp;lt;dbl&amp;gt;, StudentEvalTech &amp;lt;dbl&amp;gt;,
## #   StudentEvalInnov &amp;lt;dbl&amp;gt;, CoursesUnd &amp;lt;dbl&amp;gt;, CoursesGrad &amp;lt;dbl&amp;gt;,
## #   MentoringResProj &amp;lt;dbl&amp;gt;, MentoringTheses &amp;lt;dbl&amp;gt;, NumPublication &amp;lt;dbl&amp;gt;,
## #   SubManuscripts &amp;lt;dbl&amp;gt;, NumCitations &amp;lt;dbl&amp;gt;, NumBooks &amp;lt;dbl&amp;gt;, …&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code reduced the dimensions of our data frame [850 × 31].&lt;/p&gt;
&lt;p&gt;To select multiple columns, we need to add their names to the &lt;code&gt;select()&lt;/code&gt; verb. Let´s select information about Faculty’s full name, nationality, sex, and salary.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;select(data,EmployeeName,Nationality, Sex, Salary)
## # A tibble: 850 × 4
##    EmployeeName          Nationality Sex   Salary
##    &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 Adinolfi, Wilson  K   USA         M      62506
##  2 Ait Sidi, Karthikeyan USA         M     104437
##  3 Akinkuolie, Sarah     USA         F      64955
##  4 Alagbe,Trina          USA         F      64991
##  5 Anderson, Carol       USA         F      50825
##  6 Anderson, Linda       England     F      57568
##  7 Andreola, Colby       England     F      95660
##  8 Athwal, Sam           England     M      59365
##  9 Bachiochi, Linda      Spain       F      47837
## 10 Newman, Richard       Spain       M      50178
## # … with 840 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filtering-rows&#34; class=&#34;section level3&#34; number=&#34;2.4.3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.4.3&lt;/span&gt; Filtering rows&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; verb is used to extract rows, based on a specified condition.&lt;/p&gt;
&lt;p&gt;For example, we want to extract only the rows belonging to female faculty.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(data,Sex == &amp;quot;F&amp;quot;)
## # A tibble: 486 × 32
##    AcadYear FirstYearApp EmployeeName    Sex   YearBirth Nationality Appointment
##       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt;
##  1     2019         2019 Akinkuolie, Sa… F          1981 USA                   1
##  2     2019         2019 Alagbe,Trina    F          1979 USA                   1
##  3     2019         2019 Anderson, Carol F          1977 USA                   1
##  4     2019         2019 Anderson, Linda F          1977 England               2
##  5     2019         2019 Andreola, Colby F          1975 England               2
##  6     2019         2019 Bachiochi, Lin… F          1967 Spain                 3
##  7     2019         2019 Ngodup, Shari   F          1981 Australia             1
##  8     2019         2019 Nguyen, Dheepa  F          1977 Australia             1
##  9     2019         2019 Nguyen, Lei-Mi… F          1982 Denmark               1
## 10     2019         2019 Nowlan, Kristie F          1982 Canada                1
## # … with 476 more rows, and 25 more variables: SchoolApp &amp;lt;chr&amp;gt;, Salary &amp;lt;dbl&amp;gt;,
## #   DaysLateLast30 &amp;lt;dbl&amp;gt;, Absences &amp;lt;dbl&amp;gt;, ResearchArea &amp;lt;chr&amp;gt;,
## #   JobSatisfaction &amp;lt;dbl&amp;gt;, SelfEvalResp &amp;lt;dbl&amp;gt;, SelfEvalTech &amp;lt;dbl&amp;gt;,
## #   SelfEvalInnov &amp;lt;dbl&amp;gt;, StudentEvalResp &amp;lt;dbl&amp;gt;, StudentEvalTech &amp;lt;dbl&amp;gt;,
## #   StudentEvalInnov &amp;lt;dbl&amp;gt;, CoursesUnd &amp;lt;dbl&amp;gt;, CoursesGrad &amp;lt;dbl&amp;gt;,
## #   MentoringResProj &amp;lt;dbl&amp;gt;, MentoringTheses &amp;lt;dbl&amp;gt;, NumPublication &amp;lt;dbl&amp;gt;,
## #   SubManuscripts &amp;lt;dbl&amp;gt;, NumCitations &amp;lt;dbl&amp;gt;, NumBooks &amp;lt;dbl&amp;gt;, …&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code reduced the dimensions of our data frame [486 × 32].&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; verb can also be used to extract rows, based on multiple conditions. Let´s extract the rows belonging to female faculty who published at least five research articles during academic year 2021.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter(data,Sex == &amp;quot;F&amp;quot; &amp;amp;  AcadYear  == &amp;quot;2021&amp;quot; &amp;amp; NumPublication &amp;gt; 5)
## # A tibble: 120 × 32
##    AcadYear FirstYearApp EmployeeName    Sex   YearBirth Nationality Appointment
##       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt;
##  1     2021         2019 Akinkuolie, Sa… F          1981 USA                   1
##  2     2021         2019 Alagbe,Trina    F          1979 USA                   1
##  3     2021         2019 Anderson, Carol F          1977 USA                   1
##  4     2021         2019 Anderson, Linda F          1977 England               2
##  5     2021         2019 Andreola, Colby F          1975 England               2
##  6     2021         2019 Bachiochi, Lin… F          1967 Spain                 3
##  7     2021         2019 Baczenski, Rac… F          1981 Australia             1
##  8     2021         2019 Beak, Kimberly  F          1977 USA                   2
##  9     2021         2019 Beatrice, Cour… F          1981 USA                   2
## 10     2021         2019 Becker, Renee   F          1975 USA                   3
## # … with 110 more rows, and 25 more variables: SchoolApp &amp;lt;chr&amp;gt;, Salary &amp;lt;dbl&amp;gt;,
## #   DaysLateLast30 &amp;lt;dbl&amp;gt;, Absences &amp;lt;dbl&amp;gt;, ResearchArea &amp;lt;chr&amp;gt;,
## #   JobSatisfaction &amp;lt;dbl&amp;gt;, SelfEvalResp &amp;lt;dbl&amp;gt;, SelfEvalTech &amp;lt;dbl&amp;gt;,
## #   SelfEvalInnov &amp;lt;dbl&amp;gt;, StudentEvalResp &amp;lt;dbl&amp;gt;, StudentEvalTech &amp;lt;dbl&amp;gt;,
## #   StudentEvalInnov &amp;lt;dbl&amp;gt;, CoursesUnd &amp;lt;dbl&amp;gt;, CoursesGrad &amp;lt;dbl&amp;gt;,
## #   MentoringResProj &amp;lt;dbl&amp;gt;, MentoringTheses &amp;lt;dbl&amp;gt;, NumPublication &amp;lt;dbl&amp;gt;,
## #   SubManuscripts &amp;lt;dbl&amp;gt;, NumCitations &amp;lt;dbl&amp;gt;, NumBooks &amp;lt;dbl&amp;gt;, …&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-columns&#34; class=&#34;section level3&#34; number=&#34;2.4.4&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.4.4&lt;/span&gt; Creating columns&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;mutate()&lt;/code&gt; verb is useful for creating new columns to a dataframe, which will have the results of operations on already existing columns.&lt;/p&gt;
&lt;p&gt;For example, we would like to add a new column with a salary adjustment of 10%. Let´s create the &lt;code&gt;AdjSalary&lt;/code&gt; column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mutate(data,AdjSalary = Salary+Salary*0.1)
## # A tibble: 850 × 33
##    AcadYear FirstYearApp EmployeeName    Sex   YearBirth Nationality Appointment
##       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt;
##  1     2019         2019 Adinolfi, Wils… M          1987 USA                   1
##  2     2019         2019 Ait Sidi, Kart… M          1985 USA                   1
##  3     2019         2019 Akinkuolie, Sa… F          1981 USA                   1
##  4     2019         2019 Alagbe,Trina    F          1979 USA                   1
##  5     2019         2019 Anderson, Carol F          1977 USA                   1
##  6     2019         2019 Anderson, Linda F          1977 England               2
##  7     2019         2019 Andreola, Colby F          1975 England               2
##  8     2019         2019 Athwal, Sam     M          1985 England               2
##  9     2019         2019 Bachiochi, Lin… F          1967 Spain                 3
## 10     2019         2019 Newman, Richard M          1969 Spain                 3
## # … with 840 more rows, and 26 more variables: SchoolApp &amp;lt;chr&amp;gt;, Salary &amp;lt;dbl&amp;gt;,
## #   DaysLateLast30 &amp;lt;dbl&amp;gt;, Absences &amp;lt;dbl&amp;gt;, ResearchArea &amp;lt;chr&amp;gt;,
## #   JobSatisfaction &amp;lt;dbl&amp;gt;, SelfEvalResp &amp;lt;dbl&amp;gt;, SelfEvalTech &amp;lt;dbl&amp;gt;,
## #   SelfEvalInnov &amp;lt;dbl&amp;gt;, StudentEvalResp &amp;lt;dbl&amp;gt;, StudentEvalTech &amp;lt;dbl&amp;gt;,
## #   StudentEvalInnov &amp;lt;dbl&amp;gt;, CoursesUnd &amp;lt;dbl&amp;gt;, CoursesGrad &amp;lt;dbl&amp;gt;,
## #   MentoringResProj &amp;lt;dbl&amp;gt;, MentoringTheses &amp;lt;dbl&amp;gt;, NumPublication &amp;lt;dbl&amp;gt;,
## #   SubManuscripts &amp;lt;dbl&amp;gt;, NumCitations &amp;lt;dbl&amp;gt;, NumBooks &amp;lt;dbl&amp;gt;, …&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(mutate(data,AdjSalary = Salary+Salary*0.1))
## Rows: 850
## Columns: 33
## $ AcadYear         &amp;lt;dbl&amp;gt; 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,…
## $ FirstYearApp     &amp;lt;dbl&amp;gt; 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,…
## $ EmployeeName     &amp;lt;chr&amp;gt; &amp;quot;Adinolfi, Wilson  K&amp;quot;, &amp;quot;Ait Sidi, Karthikeyan&amp;quot;, &amp;quot;Akin…
## $ Sex              &amp;lt;chr&amp;gt; &amp;quot;M&amp;quot;, &amp;quot;M&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;M&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;M&amp;quot;, &amp;quot;F&amp;quot;…
## $ YearBirth        &amp;lt;dbl&amp;gt; 1987, 1985, 1981, 1979, 1977, 1977, 1975, 1985, 1967,…
## $ Nationality      &amp;lt;chr&amp;gt; &amp;quot;USA&amp;quot;, &amp;quot;USA&amp;quot;, &amp;quot;USA&amp;quot;, &amp;quot;USA&amp;quot;, &amp;quot;USA&amp;quot;, &amp;quot;England&amp;quot;, &amp;quot;Englan…
## $ Appointment      &amp;lt;dbl&amp;gt; 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2,…
## $ SchoolApp        &amp;lt;chr&amp;gt; &amp;quot;ComputerScience&amp;quot;, &amp;quot;ComputerScience&amp;quot;, &amp;quot;ComputerScienc…
## $ Salary           &amp;lt;dbl&amp;gt; 62506, 104437, 64955, 64991, 50825, 57568, 95660, 593…
## $ DaysLateLast30   &amp;lt;dbl&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…
## $ Absences         &amp;lt;dbl&amp;gt; 1, 17, 3, 15, 2, 15, 19, 19, 4, 16, 12, 15, 9, 7, 1, …
## $ ResearchArea     &amp;lt;chr&amp;gt; &amp;quot;AI&amp;quot;, &amp;quot;CC&amp;quot;, &amp;quot;ML&amp;quot;, &amp;quot;ML&amp;quot;, &amp;quot;AI&amp;quot;, &amp;quot;AI&amp;quot;, &amp;quot;ML&amp;quot;, &amp;quot;AI&amp;quot;, &amp;quot;CC&amp;quot;,…
## $ JobSatisfaction  &amp;lt;dbl&amp;gt; 5, 4, 4, 5, 3, 4, 2, 3, 2, 3, 5, 5, 5, 1, 5, 5, 5, 5,…
## $ SelfEvalResp     &amp;lt;dbl&amp;gt; 3, 4, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 3, 3, 3,…
## $ SelfEvalTech     &amp;lt;dbl&amp;gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4,…
## $ SelfEvalInnov    &amp;lt;dbl&amp;gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,…
## $ StudentEvalResp  &amp;lt;dbl&amp;gt; 3, 3, 3, 4, 3, 3, 3, 4, 4, 3, 3, 3, 4, 3, 3, 4, 4, 3,…
## $ StudentEvalTech  &amp;lt;dbl&amp;gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,…
## $ StudentEvalInnov &amp;lt;dbl&amp;gt; 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,…
## $ CoursesUnd       &amp;lt;dbl&amp;gt; 5, 4, 5, 5, 5, 4, 3, 5, 4, 4, 5, 5, 4, 5, 3, 5, 5, 5,…
## $ CoursesGrad      &amp;lt;dbl&amp;gt; 2, 4, 1, 1, 3, 1, 1, 1, 3, 1, 2, 1, 4, 3, 1, 1, 1, 3,…
## $ MentoringResProj &amp;lt;dbl&amp;gt; 7, 7, 6, 7, 6, 7, 7, 2, 5, 7, 7, 7, 7, 6, 7, 7, 7, 2,…
## $ MentoringTheses  &amp;lt;dbl&amp;gt; 5, 5, 5, 5, 3, 5, 5, 0, 5, 5, 5, 5, 2, 5, 4, 5, 5, 5,…
## $ NumPublication   &amp;lt;dbl&amp;gt; 13, 14, 6, 6, 12, 13, 8, 9, 12, 13, 10, 12, 10, 10, 9…
## $ SubManuscripts   &amp;lt;dbl&amp;gt; 12, 14, 11, 10, 12, 13, 13, 11, 13, 11, 12, 13, 11, 1…
## $ NumCitations     &amp;lt;dbl&amp;gt; 213, 236, 199, 181, 224, 211, 214, 178, 200, 241, 230…
## $ NumBooks         &amp;lt;dbl&amp;gt; 0, 0, 0, 0, 0, 1, 1, 1, 2, 3, 3, 0, 1, 1, 1, 0, 1, 1,…
## $ NumConferences   &amp;lt;dbl&amp;gt; 0, 1, 2, 1, 2, 1, 2, 2, 2, 1, 3, 3, 2, 1, 0, 1, 2, 3,…
## $ ResGrantsAwa     &amp;lt;dbl&amp;gt; 4, 3, 3, 4, 3, 4, 3, 5, 4, 3, 3, 4, 4, 4, 2, 4, 5, 4,…
## $ ResGrantsSub     &amp;lt;dbl&amp;gt; 2, 2, 4, 4, 2, 2, 3, 4, 3, 2, 2, 2, 3, 3, 2, 4, 3, 4,…
## $ NumComUniv       &amp;lt;dbl&amp;gt; 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 2, 0, 1, 0, 2, 1,…
## $ NumOut           &amp;lt;dbl&amp;gt; 0, 1, 0, 1, 2, 2, 0, 2, 0, 1, 0, 1, 0, 0, 0, 2, 0, 2,…
## $ AdjSalary        &amp;lt;dbl&amp;gt; 68756.6, 114880.7, 71450.5, 71490.1, 55907.5, 63324.8…&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;summarizing-columns&#34; class=&#34;section level3&#34; number=&#34;2.4.5&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.4.5&lt;/span&gt; Summarizing columns&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;summarise()&lt;/code&gt; verb is used to provide different summary statistics from a dataframe.&lt;/p&gt;
&lt;p&gt;For example, we want to summarise the means of salary of our faculty during 2019-2022 period.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summarise(data,
          MeanSalary=mean(Salary))
## # A tibble: 1 × 1
##   MeanSalary
##        &amp;lt;dbl&amp;gt;
## 1     68707.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let´s try to compute the salary and the minumum, mean and maximum number of publications of our faculty during 2019-2022 period.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summarise(data,
          MeanSalary=mean(Salary),
          MinPublications=min(NumPublication),
          MeanPublications=mean(NumPublication),
          MaxPublications=max(NumPublication))
## # A tibble: 1 × 4
##   MeanSalary MinPublications MeanPublications MaxPublications
##        &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt;
## 1     68707.               1             9.99              18&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;multiple-verbs-at-once&#34; class=&#34;section level3&#34; number=&#34;2.4.6&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.4.6&lt;/span&gt; Multiple verbs at once&lt;/h3&gt;
&lt;p&gt;So far, we have only used one verb in each command line. However, these verbs can be chained together using the pipe operator (&lt;code&gt;%&amp;gt;%&lt;/code&gt;) to perform more complex data manipulations.&lt;/p&gt;
&lt;p&gt;Let´s try to reduce the dimension of our dataframe to work only with personal information of female faculty. To do that, we will use the pipe operator (&lt;code&gt;%&amp;gt;%&lt;/code&gt;) and &lt;code&gt;select ()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt; verbs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% 
  select(EmployeeName,Sex,YearBirth,Nationality) %&amp;gt;% 
  filter(Sex==&amp;quot;F&amp;quot;)
## # A tibble: 486 × 4
##    EmployeeName      Sex   YearBirth Nationality
##    &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;      
##  1 Akinkuolie, Sarah F          1981 USA        
##  2 Alagbe,Trina      F          1979 USA        
##  3 Anderson, Carol   F          1977 USA        
##  4 Anderson, Linda   F          1977 England    
##  5 Andreola, Colby   F          1975 England    
##  6 Bachiochi, Linda  F          1967 Spain      
##  7 Ngodup, Shari     F          1981 Australia  
##  8 Nguyen, Dheepa    F          1977 Australia  
##  9 Nguyen, Lei-Ming  F          1982 Denmark    
## 10 Nowlan, Kristie   F          1982 Canada     
## # … with 476 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code reduced the dimensions of our data frame [486 × 4].
Now, let´s order alphabetically the new dataframe. To reorder the rows of &lt;code&gt;EmployeeName&lt;/code&gt; column, we will use the &lt;code&gt;arrange()&lt;/code&gt; verb.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% 
  select(EmployeeName,Sex,YearBirth,Nationality) %&amp;gt;% 
  filter(Sex==&amp;quot;F&amp;quot;) %&amp;gt;% 
  arrange(EmployeeName)
## # A tibble: 486 × 4
##    EmployeeName      Sex   YearBirth Nationality
##    &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;      
##  1 Akinkuolie, Sarah F          1981 USA        
##  2 Akinkuolie, Sarah F          1981 USA        
##  3 Akinkuolie, Sarah F          1981 USA        
##  4 Akinkuolie, Sarah F          1981 USA        
##  5 Alagbe,Trina      F          1979 USA        
##  6 Alagbe,Trina      F          1979 USA        
##  7 Alagbe,Trina      F          1979 USA        
##  8 Alagbe,Trina      F          1979 USA        
##  9 Anderson, Carol   F          1977 USA        
## 10 Anderson, Carol   F          1977 USA        
## # … with 476 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, there is something wrong with this output. We have repeated information for each faculty. We can use &lt;code&gt;distinct()&lt;/code&gt; to remove all duplicate rows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% 
  select(EmployeeName,Sex,YearBirth,Nationality) %&amp;gt;% 
  filter(Sex==&amp;quot;F&amp;quot;) %&amp;gt;% 
  distinct(EmployeeName)
## # A tibble: 130 × 1
##    EmployeeName     
##    &amp;lt;chr&amp;gt;            
##  1 Akinkuolie, Sarah
##  2 Alagbe,Trina     
##  3 Anderson, Carol  
##  4 Anderson, Linda  
##  5 Andreola, Colby  
##  6 Bachiochi, Linda 
##  7 Ngodup, Shari    
##  8 Nguyen, Dheepa   
##  9 Nguyen, Lei-Ming 
## 10 Nowlan, Kristie  
## # … with 120 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let´s try something more complex. We want to compate the average salary and number of publications for male and female faculty during academic year 2021&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data %&amp;gt;% 
  filter(AcadYear  == &amp;quot;2021&amp;quot;) %&amp;gt;% 
  group_by(Sex) %&amp;gt;% 
  summarize(MeanSalary=mean(Salary),
            MeanPublications=mean(NumPublication))
## # A tibble: 2 × 3
##   Sex   MeanSalary MeanPublications
##   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;
## 1 F         67651.             10.2
## 2 M         69773.             10.4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the next session, we will apply &lt;code&gt;dplyr&lt;/code&gt; verbs to create visualizations using &lt;code&gt;ggplot2&lt;/code&gt; package.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
